Problem 1  Supersets of a set X

select * from A;
 x 
---
 1
 2
 3
 4
(4 rows)



select supersetsofset('{}');
 supersetsofset 
----------------
 {}
 {1}
 {2}
 {3}
 {4}
 {1,4}
 {2,3}
 {1,3}
 {1,2}
 {3,4}
 {2,4}
 {1,3,4}
 {1,2,3,4}
 {2,3,4}
 {1,2,4}
 {1,2,3}
(16 rows)


select supersetsofset('{1}');
 supersetsofset 
----------------
 {1}
 {1,4}
 {1,3}
 {1,2}
 {1,3,4}
 {1,2,3,4}
 {1,2,4}
 {1,2,3}
(8 rows)

select supersetsofset('{1,3}');
 supersetsofset 
----------------
 {1,3}
 {1,3,4}
 {1,2,3,4}
 {1,2,3}
(4 rows)

select supersetsofset('{1,2,3}');
 supersetsofset 
----------------
 {1,2,3,4}
 {1,2,3}
(2 rows)

select supersetsofset('{1,2,3,4}');
 supersetsofset 
----------------
 {1,2,3,4}
(1 row)


===

--  Problem 2  Even and odd paths

select * from graph;
 source| target 
--------+--------
      1|      2
      2|      1
(2 rows)

select * from connectedbyevenlengthpath();
 source| target 
--------+--------
      1|      1
      2|      2
(2 rows)

select * from connectedbyoddlengthpath();
 source| target 
--------+--------
      1|      2
      2|      1
(2 rows)

select * from graph;
 source| target 
--------+--------
      1|      2
      2|      3
      3|      4
      4|      5
(4 rows)

select * from connectedbyevenlengthpath();
 source| target 
--------+--------
      1|      1
      1|      3
      1|      5
      2|      2
      2|      4
      3|      3
      3|      5
      4|      4
      5|      5
(9 rows)

select * from connectedbyoddlengthpath();
 source| target 
--------+--------
      1|      2
      1|      4
      2|      3
      2|      5
      3|      4
      4|      5
(6 rows)

select * from graph;
 source| target 
--------+--------
      1|      2
      2|      3
      3|      1
(3 rows)

select * from connectedbyevenlengthpath();
 source| target 
--------+--------
      1|      1
      1|      2
      1|      3
      2|      1
      2|      2
      2|      3
      3|      1
      3|      2
      3|      3
(9 rows)

select * from connectedbyoddlengthpath();
 source| target 
--------+--------
      1|      1
      1|      2
      1|      3
      2|      1
      2|      2
      2|      3
      3|      1
      3|      2
      3|      3
(9 rows)

table graph;
 source| target 
--------+--------
      1|      2
      2|      3
      3|      1
      0|      1
      3|      4
      4|      5
      5|      6
(7 rows)

select * from connectedbyevenlengthpath();
 source| target 
--------+--------
      0|      0
      0|      1
      0|      2
      0|      3
      0|      4
      0|      5
      0|      6
      1|      1
      1|      2
      1|      3
      1|      4
      1|      5
      1|      6
      2|      1
      2|      2
      2|      3
      2|      4
      2|      5
      2|      6
      3|      1
      3|      2
      3|      3
      3|      4
      3|      5
      3|      6
      4|      4
      4|      6
      5|      5
      6|      6
(29 rows)

select * from connectedbyoddlengthpath();
 source| target 
--------+--------
      0|      1
      0|      2
      0|      3
      0|      4
      0|      5
      0|      6
      1|      1
      1|      2
      1|      3
      1|      4
      1|      5
      1|      6
      2|      1
      2|      2
      2|      3
      2|      4
      2|      5
      2|      6
      3|      1
      3|      2
      3|      3
      3|      4
      3|      5
      3|      6
      4|      5
      5|      6
(26 rows)

-- Problem 3  Topological sort


select * from graph;
 source| target 
--------+--------
      1|      2
      1|      3
      2|      3
      2|      4
      3|      7
      7|      4
      4|      5
      4|      6
      7|      6
(9 rows)

select * from topologicalsort();
 index| node 
-------+------
     1|    1
     2|    2
     3|    3
     4|    7
     5|    4
     6|    6
     7|    5
(7 rows)


-- Problem 6 Frequent itemsets

select * from document;
 doc|   words   
-----+-----------
 d1 | {A,B,C}
 d2 | {B,C,D}
 d3 | {A,E}
 d4 | {B,B,A,D}
 d5 | {E,F}
 d6 | {A,D,G}
 d7 | {C,B,A}
 d8 | {B,A}
(8 rows)

select * from frequentsets(1);

    f    
---------
 {}
 {A}
 {D}
 {F}
 {G}
 {E}
 {B}
 {C}
 {C,D}
 {E,F}
 {D,G}
 {B,D}
 {A,D}
 {A,G}
 {A,E}
 {A,B}
 {B,C}
 {A,C}
 {A,D,G}
 {A,B,D}
 {A,B,C}
 {B,C,D}
(22 rows)

select * from frequentsets(2);

   f    
---------
 {}
 {A}
 {D}
 {E}
 {B}
 {C}
 {B,D}
 {A,D}
 {A,B}
 {B,C}
 {A,C}
 {A,B,C}
(12 rows)

select * from frequentsets(3);

   f   
-------
 {}
 {A}
 {D}
 {B}
 {C}
 {A,B}
 {B,C}
(7 rows)

select * from frequentsets(4);

  f   
-------
 {}
 {A}
 {B}
 {A,B}
(4 rows)

select * from frequentsets(5);

  f  
-----
 {}
 {A}
 {B}
(3 rows)


Problem 8  Aggregated weights

select * from partsubpart;
 pid| sid| quantity 
-----+-----+----------
   1|   2|        4
   1|   3|        1
   3|   4|        1
   3|   5|        2
   3|   6|        3
   6|   7|        2
   6|   8|        3
(7 rows)

select * from basicpart;
 pid| weight 
-----+--------
   2|      5
   4|     50
   5|      3
   7|      6
   8|     10
(5 rows)


select aggregatedweight(1);
 aggregatedweight 
------------------
              202
(1 row)


select aggregatedweight(3);
 aggregatedweight 
------------------
              182
(1 row)


select aggregatedweight(2);
 aggregatedweight 
------------------
                5
(1 row)


 select q.pid, aggregatedweight(q.pid) 
 from (select pid from partsubpart union select pid from basicpart) q
 order by 1;

 pid| aggregatedweight 
-----+------------------
   1|              202
   2|                5
   3|              182
   4|               50
   5|                3
   6|               42
   7|                6
   8|               10
(8 rows)


-- Problem 9  Dijkstra's algorithm

table weightedgraph;
 source| target| weight 
--------+--------+--------
      0|      1|      2
      1|      0|      2
      0|      4|     10
      4|      0|     10
      1|      3|      3
      3|      1|      3
      1|      4|      7
      4|      1|      7
      2|      3|      4
      3|      2|      4
      3|      4|      5
      4|      3|      5
      4|      2|      6
      2|      4|      6
(14 rows)


 SELECT * FROM Dijkstra(0) order by 1;
 target| distance 
--------+----------
      0|        0
      1|        2
      2|        9
      3|        5
      4|        9
(5 rows)











